#include "sdl_eventmanager.h"

SdlEventManager::SdlEventManager()
{

}

SdlEventManager::~SdlEventManager()
{

}

SdlEventManager* SdlEventManager::GetSingletonPtr()
{
  static SdlEventManager* instance;
  if(instance == NULL)
    {
      instance = new SdlEventManager();
    }

  return instance;
}

SdlEventManager& SdlEventManager::GetSingleton()
{
  return *GetSingletonPtr();
}

void SdlEventManager::Delete()
{
  SdlEventManager* manager =GetSingletonPtr();
  manager->ShutDown();
  delete manager;
}

void SdlEventManager::Initialize()
{

}

void SdlEventManager::ShutDown()
{

}

void SdlEventManager::Update()
{
  SDL_Event event;
  if(SDL_PollEvent(&event))
    {
      //if(event.type == SDL_QUIT)break;// m_runing =  false;
      if(event.type ==SDL_KEYDOWN)
        {
          switch(event.key.keysym.sym)
            {
            case SDLK_UP :
              p_carController->Accelerate();
              break;
            case SDLK_DOWN :
              p_carController->Brake();
              break;
            case SDLK_LEFT :
              p_carController->Turn(-0.1f);
              break;
            case SDLK_RIGHT:
              p_carController->Turn(0.1f);
              break;
            }
        }
    }
		

}
void SdlEventManager::RegisterEvent(SDL_Keycode key,ControlFunc* func)
{
  m_events[key] = func;
}

CarController* SdlEventManager::GetCarController()
{
  if(p_carController == NULL)
    {
      p_carController = new CarCKeyboard();
    }
  return p_carController;
}

/*
  register string createrfunc

  GetController("CarControlle",
  
  CarController


 */
